-- 1. Как получить в виде результата все поля из таблицы my_table?

SELECT * FROM my_table;

-- 2. Как получить в виде результата только поля name_first, name_last, salary из таблицы employee?

SELECT name_first, name_last, salary FROM employee;

-- 3. Задать таблице my_table псевдоним t и вывести всех, у кого salary выше 3800.

SELECT * FROM my_table AS t WHERE salary > 3800;

-- 4. Так выбрать страны, из которых поставляют продукцию производители, чтобы страны не повторялись по 2 и более раз.

SELECT * FROM suppliers GROUP BY countries;

-- 5. Вывести все автобусы в порядке уменьшения количества мест.

SELECT * FROM buses ORDER BY packages DESC;

-- 6. Перечислить известные агрегирующие функции в MySQL.

/*
AVG: вычисляет среднее значение

SUM: вычисляет сумму значений

MIN: вычисляет наименьшее значение

MAX: вычисляет наибольшее значение

COUNT: вычисляет количество строк в запросе
 */

-- 7. Есть таблица с полями name и id. Нужно вывести имя с наибольшим id, не используя при этом команду MAX. Как это можно сделать?

SELECT * FROM таблица ORDER BY id DESC LIMIT 1;

-- 8. Обязательно ли писать команды прописными буквами? Сработает ли запрос, если его написать строчными буквами?

-- Не обязательно. Эта рекомендация осталась с тех времен когда не было программ с синтаксисом-подсветкой, сейчас SQL выполняет запросы не зависимо от регистра.

-- 9. Что такое SQL-инъекции и как их избегать?

-- это вид уязвимости в (обычно) веб-приложениях или API, позволяющий выполнить произвольный запрос в базе данных. 
-- Обычно вызван неаккуратным экранированием пользовательских данных или вообще его отсутствием.
-- Для защиты можно использовать следующие методы:
-- 1. Функция mysql(i)_real_escape_string
-- 2. Приведение к числу. Простой и эффективный способ защиты для числовых полей - приведение данных к числу.
-- 3. Подготовленные запросы. Один из лучших способов защиты от SQL инъекций. Суть в том, что SQL запрос сначала "подготавливается", а затем в него отдельно передаются данные.
